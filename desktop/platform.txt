###################################################################################################
# 
# KLANGSTROM
#
# see https://arduino.github.io/arduino-cli/latest/platform-specification/
# 
###################################################################################################

name=Klangstrom (DESKTOP)
version=1.0.0

###################################################################################################
#
# COMPILE
#
###################################################################################################

recipe.hooks.prebuild.1.pattern=date

compiler.path=/usr/bin/
compiler.klst_define=-DKLST_ARCH=2
compiler.klst_shared=../../../shared
compiler.klst_lib_src=./Klangstrom
#compiler.klst_lib_src=../../libraries/Klangstrom/src
#compiler.klst_shared_lib=../../libraries/Klangstrom/lib/klangstrom.a

compiler.c.cmd=clang
compiler.c.flags=-c -g -MMD -flto -Wall -std=c11 {compiler.klst_define}
#compiler.c.flags=-c -g -Os {compiler.warning_flags} -std=c++11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} {includes} "-I{build.core.path}/{compiler.klst_shared}" "-I{build.core.path}/{compiler.klst_lib_src}" "{source_file}" -o "{object_file}"

compiler.cpp.cmd=clang++
compiler.cpp.flags=-c -g -MMD -flto -Wall -std=c++11 -Wno-long-long -pthread {compiler.klst_define}
#compiler.cpp.flags=-c -g -Os {compiler.warning_flags} -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} {includes}  "-I{build.core.path}/{compiler.klst_shared}" "-I{build.core.path}/{compiler.klst_lib_src}" "{source_file}" -o "{object_file}"

###################################################################################################
#
# ARCHIVE
#
###################################################################################################

compiler.ar.cmd=ar
compiler.ar.flags=rcs
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} "{archive_file_path}" "{object_file}"

###################################################################################################
#
# COMBINE/LINK
#
###################################################################################################

compiler.c.linker.cmd=clang++
compiler.ldflags=
compiler.c.linker.libpath=cores/sdl/lib
compiler.c.linker.SDL2flags=-lm -liconv -Wl,-framework,CoreAudio -Wl,-framework,AudioToolbox -Wl,-framework,ForceFeedback -lobjc -Wl,-framework,CoreVideo -Wl,-framework,Cocoa -Wl,-framework,Carbon -Wl,-framework,IOKit -Wl,-weak_framework,QuartzCore -Wl,-weak_framework,Metal
recipe.c.combine.pattern="{compiler.path}{compiler.c.linker.cmd}" {compiler.c.linker.SDL2flags} {runtime.platform.path}/{compiler.c.linker.libpath}/libSDL2.a "{build.path}/{archive_file}" "-L{build.path}" {object_files} -o "{build.path}/{build.project_name}.exec" {compiler.ldflags}
#recipe.c.combine.pattern="{compiler.path}{compiler.c.linker.cmd}" {compiler.c.linker.SDL2flags} {runtime.platform.path}/{compiler.c.linker.libpath}/libSDL2.a {build.core.path}/{compiler.klst_shared_lib} "{build.path}/{archive_file}" "-L{build.path}" {object_files} -o "{build.path}/{build.project_name}.exec" {compiler.ldflags}

# execute program @todo(maybe move to upload? only works in CLI)
# recipe.hooks.linking.postlink.1.pattern="{build.path}/{build.project_name}.exec"

###################################################################################################
#
# PREPROCESS
#
###################################################################################################

preproc.includes.cmd=/usr/bin/clang++
preproc.includes.flags=-w -x c++ -M -MG -MP
recipe.preproc.includes="{preproc.includes.cmd}" {compiler.cpp.flags} {preproc.includes.flags} {compiler.cpp.extra_flags} {build.extra_flags} {includes} "-I{build.core.path}/{compiler.klst_shared}" "-I{build.core.path}/{compiler.klst_lib_src}" "{source_file}"

preproc.macros.cmd=/usr/bin/clang++
preproc.macros.flags=-w -x c++ -E -CC
recipe.preproc.macros="{preproc.macros.cmd}" {compiler.cpp.flags} {preproc.macros.flags} {compiler.cpp.extra_flags} {build.extra_flags} {includes} "-I{build.core.path}/{compiler.klst_shared}" "-I{build.core.path}/{compiler.klst_lib_src}" "{source_file}" -o "{preprocessed_file_path}"

###################################################################################################
#
# UPLOAD
#
###################################################################################################

recipe.output.tmp_file={build.project_name}.exec
recipe.output.save_file={build.project_name}.{build.variant}.{build.preferred_out_format}

tools.sdlexecprog.upload.pattern="{build.path}/{build.project_name}.exec"
tools.sdlexecprog.upload.params.verbose=
tools.sdlexecprog.upload.params.quiet=

# CLI examples:

# arduino-cli compile -v -b klangstrom:desktop:sdl SDL--Application
# arduino-cli upload -b klangstrom:desktop:sdl -p . SDL--Application
