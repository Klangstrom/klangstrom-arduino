###################################################################################################
# 
# KLANGSTROM
#
# see https://arduino.github.io/arduino-cli/latest/platform-specification/
# 
###################################################################################################

name=Klangstrom (Desktop Emulator)
version=0.0.3

###################################################################################################
#
# COMPILE
#
###################################################################################################

recipe.hooks.prebuild.1.pattern=date

macos.architecture=arm

compiler.path.macosx=/usr/bin/
compiler.path.linux=/usr/bin/
compiler.klst_define=-DKLST_ARCH=2 -DKLANG_SAMPLES_PER_AUDIO_BLOCK={build.flags.audioblock} {build.flags.OSC} {build.flags.DISPLAY} -DKLANG_AUDIO_RATE={build.flags.samplingrate} -DKLANG_DEBUG_LEVEL=2 -DKLANG_OSC_TRANSMIT_PORT=7001 -DKLANG_OSC_RECEIVE_PORT=7001 -DKLANG_BOARD_EMULATOR={build.flags.board} -DKLST_USE_CMSIS_DSP -DTEST 
compiler.klst_shared=../../../shared
compiler.klst_lib_src=./Klangstrom
#compiler.klst_lib_src=../../libraries/Klangstrom/src
#compiler.klst_shared_lib=../../libraries/Klangstrom/lib/klangstrom.a

compiler.SDL2_lib_src.macosx=SDL2.macos.{macos.architecture}/include/
compiler.SDL2_lib_src.linux=SDL2.linux/include/
compiler.SDL2_lib_src.windows=SDL2.windows/include/

compiler.c.cmd=gcc
compiler.c.std=c17
compiler.c.flags.macosx=-c -g -MMD -Wall -flto -std={compiler.c.std} {compiler.klst_define}
compiler.c.flags.linux=-c -g -MMD -Wall -flto -std={compiler.c.std} {compiler.klst_define}
compiler.c.flags.windows=
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} {includes} "-I{build.core.path}/{compiler.klst_shared}" "-I{build.core.path}/{compiler.klst_lib_src}" "-I{build.core.path}/{compiler.SDL2_lib_src}" "{source_file}" -o "{object_file}"

compiler.cpp.cmd=g++
compiler.cpp.std=c++17
compiler.cpp.flags.macosx=-c -g -MMD -Wall -flto  -std={compiler.cpp.std} -Wno-long-long -pthread {compiler.klst_define}
compiler.cpp.flags.linux=-c -g -MMD -Wall -flto -std={compiler.cpp.std} -Wno-long-long -pthread {compiler.klst_define}
compiler.cpp.flags.windows=
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} {includes} "-I{build.core.path}/{compiler.klst_shared}" "-I{build.core.path}/{compiler.klst_lib_src}" "-I{build.core.path}/{compiler.SDL2_lib_src}" "{source_file}" -o "{object_file}"

###################################################################################################
#
# ARCHIVE
#
###################################################################################################

compiler.ar.cmd=ar
compiler.ar.flags=-crs
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} "{archive_file_path}" "{object_file}"

###################################################################################################
#
# COMBINE/LINK
#
###################################################################################################

compiler.c.linker.cmd=g++
compiler.ldflags=
# @TODO try to get rif of `cores/sdl` in `libpath`
compiler.c.linker.libpath.macosx=cores/sdl/SDL2.macos.{macos.architecture}
compiler.c.linker.libpath.linux=cores/SDL2.linux
compiler.c.linker.libpath.windows=cores/SDL2.windows
compiler.c.linker.SDL2flags.macosx=-lm -liconv -Wl,-framework,CoreAudio -Wl,-framework,AudioToolbox -Wl,-framework,ForceFeedback -lobjc -Wl,-framework,CoreVideo -Wl,-framework,Cocoa -Wl,-framework,Carbon -Wl,-framework,IOKit -Wl,-weak_framework,QuartzCore -Wl,-weak_framework,Metal -lSDL2 "-L{runtime.platform.path}/{compiler.c.linker.libpath}/lib/"
compiler.c.linker.SDL2flags.linux=-lm -D_THREAD_SAFE -D_REENTRANT -lpthread -lSDL2 "-L{runtime.platform.path}/{compiler.c.linker.libpath}/lib/"
compiler.c.linker.SDL2flags.windows=
recipe.c.combine.pattern="{compiler.path}{compiler.c.linker.cmd}" {object_files} {compiler.c.linker.SDL2flags} "{build.path}/{archive_file}" "-L{build.path}" -o "{build.path}/{build.project_name}.exec" {compiler.ldflags}
# recipe.c.combine.pattern="{compiler.path}{compiler.c.linker.cmd}" {object_files} {compiler.c.linker.SDL2flags} {runtime.platform.path}/{compiler.c.linker.libpath} "{build.path}/{archive_file}" "-L{build.path}" -o "{build.path}/{build.project_name}.exec" {compiler.ldflags}

# copy run script to `/tmp/` ( or similar )
compiler.execpath=sketch-exec
compiler.copy.macosx={compiler.execpath}/copy-sketch-exec.macos.sh
compiler.copy.windows=
compiler.copy.linux={compiler.execpath}/copy-sketch-exec.linux.sh
compiler.exec.macosx={compiler.execpath}/sketch-exec.sh
compiler.exec.windows=
compiler.exec.linux={compiler.execpath}/sketch-exec.sh
recipe.hooks.linking.postlink.1.pattern="{build.core.path}/../../{compiler.copy}" "{build.core.path}/../../{compiler.exec}"

###################################################################################################
#
# PREPROCESS
#
###################################################################################################

preproc.includes.cmd.macosx=g++
preproc.includes.cmd.linux=g++
preproc.includes.flags=-w -x c++ -M -MG -MP
recipe.preproc.includes="{compiler.path}{preproc.includes.cmd}" {compiler.cpp.flags} {preproc.includes.flags} {compiler.cpp.extra_flags} {build.extra_flags} {includes} "-I{build.core.path}/{compiler.klst_shared}" "-I{build.core.path}/{compiler.klst_lib_src}" "-I{build.core.path}/{compiler.SDL2_lib_src}" "{source_file}"

preproc.macros.cmd.macosx=g++
preproc.macros.cmd.linux=g++
preproc.macros.flags=-w -x c++ -E -CC
recipe.preproc.macros="{compiler.path}{preproc.macros.cmd}" {compiler.cpp.flags} {preproc.macros.flags} {compiler.cpp.extra_flags} {build.extra_flags} {includes} "-I{build.core.path}/{compiler.klst_shared}" "-I{build.core.path}/{compiler.klst_lib_src}" "-I{build.core.path}/{compiler.SDL2_lib_src}" "{source_file}" -o "{preprocessed_file_path}"

###################################################################################################
#
# UPLOAD
#
###################################################################################################

#recipe.output.tmp_file={build.project_name}.exec
#recipe.output.save_file={build.project_name}.{build.variant}.{build.preferred_out_format}

# run sketch via script ( this prevents the sketch from being shut down by Arduino )
tools.sdlexecprog.exec.macosx=/tmp/sketch-exec.sh
tools.sdlexecprog.exec.windows=
tools.sdlexecprog.exec.linux=/tmp/sketch-exec.sh
#
#
# TODO problem with dialog box quitting 
# cannot use the upload script when also using the dialog box with e.g `Card.begin()`
tools.sdlexecprog.upload.pattern="{build.path}/{build.project_name}.exec" {upload.options}
#tools.sdlexecprog.upload.pattern="{exec}" "{build.path}/{build.project_name}.exec" {upload.options}
#
#
tools.sdlexecprog.upload.params.verbose=
tools.sdlexecprog.upload.params.quiet=

###################################################################################################
#
# CLI
#
###################################################################################################

# sketches can also be compiled and run from CLI e.g:
# 
# arduino-cli compile -v -b klangstrom:desktop:sdl SDL--Application
# arduino-cli upload -b klangstrom:desktop:sdl -p . SDL--Application
